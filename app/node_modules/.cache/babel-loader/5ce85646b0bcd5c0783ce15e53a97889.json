{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { useState } from \"react\";\n\nvar useFormValidator = function useFormValidator(formSchema, submitCallback) {\n  var _useState = useState(formSchema),\n      _useState2 = _slicedToArray(_useState, 2),\n      formState = _useState2[0],\n      setFormState = _useState2[1];\n\n  var handleOnChange = function handleOnChange(event) {\n    var name = event.target.name;\n    var value = event.target.value;\n    var errors = validateField(name, value);\n    setFormState(function (prevState) {\n      return Object.assign(Object.assign({}, prevState), _defineProperty({}, name, Object.assign(Object.assign({}, prevState[name]), {\n        value: value,\n        errors: errors\n      })));\n    });\n  };\n\n  var handleOnSubmit = function handleOnSubmit() {\n    var isClean = true;\n\n    var _loop = function _loop(fieldName) {\n      var errors = validateField(fieldName, formState[fieldName].value);\n\n      if (errors.length) {\n        setFormState(function (prevState) {\n          return Object.assign(Object.assign({}, prevState), _defineProperty({}, fieldName, Object.assign(Object.assign({}, prevState[fieldName]), {\n            errors: errors\n          })));\n        });\n        isClean = false;\n      }\n    };\n\n    for (var fieldName in formState) {\n      _loop(fieldName);\n    }\n\n    if (isClean) {\n      submitCallback(formState);\n    }\n  };\n\n  var isValidEmail = function isValidEmail(value) {\n    return /^\\S+@\\S+\\.\\S+$/g.test(value);\n  };\n\n  var isValidLength = function isValidLength(value, limit) {\n    return value.length <= limit;\n  };\n\n  var validateField = function validateField(name, value) {\n    var validations = formState[name].validations;\n    var errors = [];\n\n    if (validations === null || validations === void 0 ? void 0 : validations.length) {\n      var _iterator = _createForOfIteratorHelper(validations),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var validation = _step.value;\n          var pass = true;\n\n          switch (validation.type) {\n            case \"maxLength\":\n              if (!isValidLength(value, validation.limit)) {\n                pass = false;\n              }\n\n              break;\n\n            case \"emailFormat\":\n              if (value && isValidEmail(value) === false) {\n                pass = false;\n              }\n\n              break;\n\n            case \"required\":\n              if (value == \"\") {\n                pass = false;\n              }\n\n              break;\n\n            default:\n          }\n\n          if (!pass) {\n            var errMsg = typeof validation.errorMessage === \"function\" ? validation.errorMessage(value) : validation.errorMessage;\n            errors.push(errMsg);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    return errors;\n  };\n\n  return {\n    formState: formState,\n    setFormState: setFormState,\n    handleOnChange: handleOnChange,\n    handleOnSubmit: handleOnSubmit\n  };\n};\n\nexport default useFormValidator;","map":{"version":3,"sources":["../../../src/utils/formValidator.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { useState } from \"react\";\nconst useFormValidator = (formSchema, submitCallback) => {\n    const [formState, setFormState] = useState(formSchema);\n    const handleOnChange = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n        const errors = validateField(name, value);\n        setFormState(prevState => (Object.assign(Object.assign({}, prevState), { [name]: Object.assign(Object.assign({}, prevState[name]), { value: value, errors: errors }) })));\n    };\n    const handleOnSubmit = () => {\n        let isClean = true;\n        for (const fieldName in formState) {\n            const errors = validateField(fieldName, formState[fieldName].value);\n            if (errors.length) {\n                setFormState(prevState => (Object.assign(Object.assign({}, prevState), { [fieldName]: Object.assign(Object.assign({}, prevState[fieldName]), { errors: errors }) })));\n                isClean = false;\n            }\n        }\n        if (isClean) {\n            submitCallback(formState);\n        }\n    };\n    const isValidEmail = (value) => /^\\S+@\\S+\\.\\S+$/g.test(value);\n    const isValidLength = (value, limit) => value.length <= limit;\n    const validateField = (name, value) => {\n        const validations = formState[name].validations;\n        let errors = [];\n        if (validations === null || validations === void 0 ? void 0 : validations.length) {\n            for (const validation of validations) {\n                let pass = true;\n                switch (validation.type) {\n                    case \"maxLength\":\n                        if (!isValidLength(value, validation.limit)) {\n                            pass = false;\n                        }\n                        break;\n                    case \"emailFormat\":\n                        if (value && isValidEmail(value) === false) {\n                            pass = false;\n                        }\n                        break;\n                    case \"required\":\n                        if (value == \"\") {\n                            pass = false;\n                        }\n                        break;\n                    default:\n                }\n                if (!pass) {\n                    const errMsg = typeof validation.errorMessage === \"function\" ? validation.errorMessage(value) : validation.errorMessage;\n                    errors.push(errMsg);\n                }\n            }\n        }\n        return errors;\n    };\n    return { formState, setFormState, handleOnChange, handleOnSubmit };\n};\nexport default useFormValidator;\n//# sourceMappingURL=formValidator.js.map"]},"metadata":{},"sourceType":"module"}