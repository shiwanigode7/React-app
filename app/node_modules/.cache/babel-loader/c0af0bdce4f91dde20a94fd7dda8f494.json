{"ast":null,"code":"import Service from \"@esko/cloud-service-utils/Service\";\nexport var appsList = {\n  approve: {\n    getSitesUrl: \"\"\n  },\n  capilano: {\n    getSitesUrl: \"rest/SiteApi/organizationSites\"\n  },\n  packshots: {\n    getSitesUrl: \"rest/api/v1/sites\"\n  }\n};\n\nvar launchSitesRequests = function launchSitesRequests(appsList, orgsList) {\n  return Object.keys(appsList).filter(function (app) {\n    return appsList[app].getSitesUrl;\n  }).map(function (app) {\n    return getAppSites(app, orgsList);\n  });\n};\n\nexport var getAppSites = function getAppSites(app, organizations) {\n  return new Service(app).post(appsList[app].getSitesUrl.split(\"/\"), organizations);\n};\nexport var fetchAppSites = function fetchAppSites(orgsList) {\n  var sitesResponse = new Promise(function (resolve, reject) {\n    if (orgsList === null || orgsList === void 0 ? void 0 : orgsList.length) {\n      var requestsList = launchSitesRequests(appsList, orgsList);\n      Promise.allSettled(requestsList).then(function (results) {\n        var responseObject = {};\n        Object.keys(appsList).filter(function (app) {\n          return appsList[app].getSitesUrl;\n        }).forEach(function (app, idx) {\n          responseObject[app] = results[idx].status == \"fulfilled\" ? results[idx].value : results[idx].reason;\n        });\n        resolve(responseObject);\n      }, function (err) {\n        return reject(err);\n      });\n    } else {\n      reject(\"No Organizations provided\");\n    }\n  });\n  return sitesResponse;\n};\nexport var arrangeSitesByOrgWithAvailableApps = function arrangeSitesByOrgWithAvailableApps(sitesResponse) {\n  var orgsWithSites = {};\n  var availableApps = Object.keys(sitesResponse).filter(function (app) {\n    return sitesResponse[app].appName;\n  });\n  availableApps.forEach(function (app) {\n    var appSitesResponse = sitesResponse[app];\n    var appMetadata = {\n      name: appSitesResponse.appName,\n      icon: appSitesResponse.appIcon,\n      key: app\n    };\n\n    var _loop = function _loop(org) {\n      appSitesResponse.sites[org].forEach(function (site) {\n        orgsWithSites[org] = orgsWithSites[org] || [];\n        var foundAndUpdated = orgsWithSites[org].some(function (listedSite, idx) {\n          if (listedSite.workspace === site.workspace) {\n            orgsWithSites[org][idx].apps.push(Object.assign(Object.assign({}, appMetadata), {\n              urlFragment: site.appUrlFragment\n            }));\n            return true;\n          } else {\n            return false;\n          }\n        });\n        orgsWithSites[org] = foundAndUpdated ? orgsWithSites[org] : orgsWithSites[org].concat([Object.assign(Object.assign({}, site), {\n          apps: [Object.assign(Object.assign({}, appMetadata), {\n            urlFragment: site.appUrlFragment\n          })]\n        })]);\n      });\n    };\n\n    for (var org in appSitesResponse.sites) {\n      _loop(org);\n    }\n  });\n  return orgsWithSites;\n};","map":{"version":3,"sources":["../../../../src/data/requests/sites.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import Service from \"@esko/cloud-service-utils/Service\";\nexport const appsList = {\n    approve: {\n        getSitesUrl: \"\"\n    },\n    capilano: {\n        getSitesUrl: \"rest/SiteApi/organizationSites\"\n    },\n    packshots: {\n        getSitesUrl: \"rest/api/v1/sites\"\n    }\n};\nconst launchSitesRequests = (appsList, orgsList) => Object.keys(appsList)\n    .filter(app => appsList[app].getSitesUrl)\n    .map(app => {\n    return getAppSites(app, orgsList);\n});\nexport const getAppSites = (app, organizations) => {\n    return new Service(app).post(appsList[app].getSitesUrl.split(\"/\"), organizations);\n};\nexport const fetchAppSites = orgsList => {\n    const sitesResponse = new Promise((resolve, reject) => {\n        if (orgsList === null || orgsList === void 0 ? void 0 : orgsList.length) {\n            const requestsList = launchSitesRequests(appsList, orgsList);\n            Promise.allSettled(requestsList).then(results => {\n                const responseObject = {};\n                Object.keys(appsList)\n                    .filter(app => appsList[app].getSitesUrl)\n                    .forEach((app, idx) => {\n                    responseObject[app] = results[idx].status == \"fulfilled\" ? results[idx].value : results[idx].reason;\n                });\n                resolve(responseObject);\n            }, err => reject(err));\n        }\n        else {\n            reject(\"No Organizations provided\");\n        }\n    });\n    return sitesResponse;\n};\nexport const arrangeSitesByOrgWithAvailableApps = sitesResponse => {\n    const orgsWithSites = {};\n    const availableApps = Object.keys(sitesResponse).filter(app => sitesResponse[app].appName);\n    availableApps.forEach(app => {\n        const appSitesResponse = sitesResponse[app];\n        const appMetadata = {\n            name: appSitesResponse.appName,\n            icon: appSitesResponse.appIcon,\n            key: app\n        };\n        for (let org in appSitesResponse.sites) {\n            appSitesResponse.sites[org].forEach(site => {\n                orgsWithSites[org] = orgsWithSites[org] || [];\n                const foundAndUpdated = orgsWithSites[org].some((listedSite, idx) => {\n                    if (listedSite.workspace === site.workspace) {\n                        orgsWithSites[org][idx].apps.push(Object.assign(Object.assign({}, appMetadata), { urlFragment: site.appUrlFragment }));\n                        return true;\n                    }\n                    else {\n                        return false;\n                    }\n                });\n                orgsWithSites[org] = foundAndUpdated\n                    ? orgsWithSites[org]\n                    : orgsWithSites[org].concat([Object.assign(Object.assign({}, site), { apps: [Object.assign(Object.assign({}, appMetadata), { urlFragment: site.appUrlFragment })] })]);\n            });\n        }\n    });\n    return orgsWithSites;\n};\n//# sourceMappingURL=sites.js.map"]},"metadata":{},"sourceType":"module"}