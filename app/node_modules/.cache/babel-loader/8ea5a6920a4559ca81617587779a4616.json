{"ast":null,"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FormControl, InputLabel, TextField } from \"@material-ui/core\";\nimport { Button } from \"@esko/cloud-ui-components\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport useFormValidator from \"../../utils/formValidator\";\nimport MuiDialog from \"../Dialog/dialog\";\nvar styles = makeStyles(function (theme) {\n  return {\n    helperText: {\n      color: theme.palette.type === \"light\" ? theme.palette.error.main : theme.palette.error.contrastText,\n      fontSize: \"12px\"\n    },\n    textarea: {\n      resize: \"vertical\",\n      padding: 0\n    }\n  };\n});\n\nvar AddGroupDialog = function AddGroupDialog(_ref) {\n  var open = _ref.open,\n      handleOnClose = _ref.handleOnClose,\n      handleAddGroup = _ref.handleAddGroup,\n      presetName = _ref.presetName,\n      presetEmail = _ref.presetEmail,\n      presetDescription = _ref.presetDescription,\n      t = _ref.t;\n\n  var _useFormValidator = useFormValidator({\n    name: {\n      value: presetName || \"\",\n      errors: [],\n      validations: [{\n        type: \"maxLength\",\n        limit: 64,\n        errorMessage: function errorMessage(val) {\n          return \"\".concat(t(\"errorMessages.cannotBeLongerThan\", {\n            field: t(\"name\"),\n            max: 64\n          }), \" ( \").concat(t(\"current\"), \":  \").concat(val.length, \")\");\n        }\n      }, {\n        type: \"required\",\n        errorMessage: t(\"errorMessages.fieldIsRequired\", {\n          field: t(\"name\")\n        })\n      }]\n    },\n    description: {\n      value: presetDescription || \"\",\n      errors: [],\n      validations: [{\n        type: \"maxLength\",\n        limit: 255,\n        errorMessage: function errorMessage(val) {\n          return \"\".concat(t(\"errorMessages.cannotBeLongerThan\", {\n            field: t(\"description\"),\n            max: 255\n          }), \" ( \").concat(t(\"current\"), \":  \").concat(val.length, \")\");\n        }\n      }]\n    },\n    email: {\n      value: presetEmail || \"\",\n      errors: [],\n      validations: [{\n        type: \"maxLength\",\n        limit: 100,\n        errorMessage: function errorMessage(val) {\n          return \"\".concat(t(\"errorMessages.cannotBeLongerThan\", {\n            field: t(\"email\"),\n            max: 100\n          }), \" ( \").concat(t(\"current\"), \":  \").concat(val.length, \")\");\n        }\n      }, {\n        type: \"emailFormat\",\n        errorMessage: t(\"errorMessages.enterValidField\", {\n          field: t(\"emailFormat\")\n        })\n      }]\n    }\n  }, handleAddGroup),\n      formState = _useFormValidator.formState,\n      handleOnChange = _useFormValidator.handleOnChange,\n      handleOnSubmit = _useFormValidator.handleOnSubmit;\n\n  var name = formState.name,\n      description = formState.description,\n      email = formState.email;\n  var classes = styles();\n  return /*#__PURE__*/React.createElement(MuiDialog, {\n    className: classes.dialogContainer,\n    title: t(\"addGroup\"),\n    open: open,\n    content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormControl, {\n      fullWidth: true,\n      margin: \"normal\"\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      error: name.errors.length > 0,\n      required: true,\n      shrink: false,\n      htmlFor: \"name\"\n    }, t(\"name\")), /*#__PURE__*/React.createElement(TextField, {\n      id: \"name\",\n      name: \"name\",\n      autoFocus: true,\n      value: name.value,\n      variant: \"outlined\",\n      onChange: handleOnChange,\n      helperText: name.errors.map(function (error, index) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: classes.helperText,\n          key: \"nameError_\" + index\n        }, error), /*#__PURE__*/React.createElement(\"br\", null));\n      })\n    })), /*#__PURE__*/React.createElement(FormControl, {\n      fullWidth: true,\n      margin: \"normal\"\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      error: email.errors.length > 0,\n      shrink: false,\n      htmlFor: \"email\"\n    }, t(\"groupEmail\")), /*#__PURE__*/React.createElement(TextField, {\n      id: \"email\",\n      name: \"email\",\n      value: email.value,\n      variant: \"outlined\",\n      onChange: handleOnChange,\n      helperText: email.errors.map(function (error, index) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: classes.helperText,\n          key: \"email_\" + index\n        }, error), /*#__PURE__*/React.createElement(\"br\", null));\n      })\n    })), /*#__PURE__*/React.createElement(FormControl, {\n      fullWidth: true,\n      margin: \"normal\"\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      error: description.errors.length > 0,\n      shrink: false,\n      htmlFor: \"description\"\n    }, t(\"groupDescription\")), /*#__PURE__*/React.createElement(TextField, {\n      id: \"description\",\n      name: \"description\",\n      multiline: true,\n      rows: 4,\n      value: description.value,\n      variant: \"filled\",\n      onChange: handleOnChange,\n      helperText: description.errors.map(function (error, index) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: classes.helperText,\n          key: \"description_\" + index\n        }, error), /*#__PURE__*/React.createElement(\"br\", null));\n      }),\n      inputProps: {\n        className: classes.textarea\n      }\n    }))),\n    actions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      onClick: handleOnClose\n    }, t(\"close\")), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: handleOnSubmit\n    }, t(\"addGroup\")))\n  });\n};\n\nAddGroupDialog.propTypes = {\n  open: PropTypes.bool,\n  organization: PropTypes.string,\n  handleOnClose: PropTypes.func,\n  handleAddGroup: PropTypes.func,\n  presetName: PropTypes.string,\n  presetEmail: PropTypes.string,\n  presetDescription: PropTypes.string\n};\nexport default AddGroupDialog;","map":{"version":3,"sources":["../../../../src/components/Groups/addGroupDialog.js"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,SAAP,MAAsB,YAAtB;AACA,SAAS,WAAT,EAAsB,UAAtB,EAAkC,SAAlC,QAAmD,mBAAnD;AACA,SAAS,MAAT,QAAuB,2BAAvB;AACA,SAAS,UAAT,QAA2B,0BAA3B;AACA,OAAO,gBAAP,MAA6B,2BAA7B;AACA,OAAO,SAAP,MAAsB,kBAAtB;AAEA,IAAM,MAAM,GAAG,UAAU,CAAC,UAAA,KAAK;AAAA,SAAK;AACnC,IAAA,UAAU,EAAE;AACX,MAAA,KAAK,EAAE,KAAK,CAAC,OAAN,CAAc,IAAd,KAAuB,OAAvB,GAAiC,KAAK,CAAC,OAAN,CAAc,KAAd,CAAoB,IAArD,GAA4D,KAAK,CAAC,OAAN,CAAc,KAAd,CAAoB,YAD5E;AAEX,MAAA,QAAQ,EAAE;AAFC,KADuB;AAKnC,IAAA,QAAQ,EAAE;AACT,MAAA,MAAM,EAAE,UADC;AAET,MAAA,OAAO,EAAE;AAFA;AALyB,GAAL;AAAA,CAAN,CAAzB;;AAWA,IAAM,cAAc,GAAG,SAAjB,cAAiB,OAA2F;AAAA,MAAxF,IAAwF,QAAxF,IAAwF;AAAA,MAAlF,aAAkF,QAAlF,aAAkF;AAAA,MAAnE,cAAmE,QAAnE,cAAmE;AAAA,MAAnD,UAAmD,QAAnD,UAAmD;AAAA,MAAvC,WAAuC,QAAvC,WAAuC;AAAA,MAA1B,iBAA0B,QAA1B,iBAA0B;AAAA,MAAP,CAAO,QAAP,CAAO;;AACjH,0BAAsD,gBAAgB,CACrE;AACC,IAAA,IAAI,EAAE;AACL,MAAA,KAAK,EAAE,UAAU,IAAI,EADhB;AAEL,MAAA,MAAM,EAAE,EAFH;AAGL,MAAA,WAAW,EAAE,CACZ;AACC,QAAA,IAAI,EAAE,WADP;AAEC,QAAA,KAAK,EAAE,EAFR;AAGC,QAAA,YAAY,EAAE,sBAAA,GAAG;AAAA,2BACb,CAAC,CAAC,kCAAD,EAAqC;AAAE,YAAA,KAAK,EAAE,CAAC,CAAC,MAAD,CAAV;AAAoB,YAAA,GAAG,EAAE;AAAzB,WAArC,CADY,gBAC6D,CAAC,CAAC,SAAD,CAD9D,gBAC+E,GAAG,CAAC,MADnF;AAAA;AAHlB,OADY,EAOZ;AACC,QAAA,IAAI,EAAE,UADP;AAEC,QAAA,YAAY,EAAE,CAAC,CAAC,+BAAD,EAAkC;AAAE,UAAA,KAAK,EAAE,CAAC,CAAC,MAAD;AAAV,SAAlC;AAFhB,OAPY;AAHR,KADP;AAiBC,IAAA,WAAW,EAAE;AACZ,MAAA,KAAK,EAAE,iBAAiB,IAAI,EADhB;AAEZ,MAAA,MAAM,EAAE,EAFI;AAGZ,MAAA,WAAW,EAAE,CACZ;AACC,QAAA,IAAI,EAAE,WADP;AAEC,QAAA,KAAK,EAAE,GAFR;AAGC,QAAA,YAAY,EAAE,sBAAA,GAAG;AAAA,2BACb,CAAC,CAAC,kCAAD,EAAqC;AAAE,YAAA,KAAK,EAAE,CAAC,CAAC,aAAD,CAAV;AAA2B,YAAA,GAAG,EAAE;AAAhC,WAArC,CADY,gBACqE,CAAC,CAAC,SAAD,CADtE,gBACuF,GAAG,CAAC,MAD3F;AAAA;AAHlB,OADY;AAHD,KAjBd;AA6BC,IAAA,KAAK,EAAE;AACN,MAAA,KAAK,EAAE,WAAW,IAAI,EADhB;AAEN,MAAA,MAAM,EAAE,EAFF;AAGN,MAAA,WAAW,EAAE,CACZ;AACC,QAAA,IAAI,EAAE,WADP;AAEC,QAAA,KAAK,EAAE,GAFR;AAGC,QAAA,YAAY,EAAE,sBAAA,GAAG;AAAA,2BACb,CAAC,CAAC,kCAAD,EAAqC;AAAE,YAAA,KAAK,EAAE,CAAC,CAAC,OAAD,CAAV;AAAqB,YAAA,GAAG,EAAE;AAA1B,WAArC,CADY,gBAC+D,CAAC,CAAC,SAAD,CADhE,gBACiF,GAAG,CAAC,MADrF;AAAA;AAHlB,OADY,EAOZ;AACC,QAAA,IAAI,EAAE,aADP;AAEC,QAAA,YAAY,EAAE,CAAC,CAAC,+BAAD,EAAkC;AAAE,UAAA,KAAK,EAAE,CAAC,CAAC,aAAD;AAAV,SAAlC;AAFhB,OAPY;AAHP;AA7BR,GADqE,EA+CrE,cA/CqE,CAAtE;AAAA,MAAQ,SAAR,qBAAQ,SAAR;AAAA,MAAmB,cAAnB,qBAAmB,cAAnB;AAAA,MAAmC,cAAnC,qBAAmC,cAAnC;;AAkDA,MAAQ,IAAR,GAAqC,SAArC,CAAQ,IAAR;AAAA,MAAc,WAAd,GAAqC,SAArC,CAAc,WAAd;AAAA,MAA2B,KAA3B,GAAqC,SAArC,CAA2B,KAA3B;AAEA,MAAM,OAAO,GAAG,MAAM,EAAtB;AAEA,sBACC,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;AACT,IAAA,SAAS,EAAE,OAAO,CAAC,eADV;AAET,IAAA,KAAK,EAAE,CAAC,CAAC,UAAD,CAFC;AAGT,IAAA,IAAI,EAAE,IAHG;AAIT,IAAA,OAAO,eACN,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,eACC,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY;AAAC,MAAA,SAAS,EAAA,IAAV;AAAW,MAAA,MAAM,EAAE;AAAnB,KAAZ,eACC,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AAAC,MAAA,KAAK,EAAE,IAAI,CAAC,MAAL,CAAY,MAAZ,GAAqB,CAA7B;AAAgC,MAAA,QAAQ,EAAA,IAAxC;AAAyC,MAAA,MAAM,EAAE,KAAjD;AAAwD,MAAA,OAAO,EAAC;AAAhE,KAAX,EACE,CAAC,CAAC,MAAD,CADH,CADD,eAIC,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;AACT,MAAA,EAAE,EAAC,MADM;AAET,MAAA,IAAI,EAAC,MAFI;AAGT,MAAA,SAAS,EAAA,IAHA;AAIT,MAAA,KAAK,EAAE,IAAI,CAAC,KAJH;AAKT,MAAA,OAAO,EAAE,UALA;AAMT,MAAA,QAAQ,EAAE,cAND;AAOT,MAAA,UAAU,EAAE,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,UAAC,KAAD,EAAQ,KAAR,EAAiB;AAC5C,4BACC,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,eACC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,UAAA,SAAS,EAAE,OAAO,CAAC,UAAzB;AAAqC,UAAA,GAAG,EAAE,eAAe;AAAzD,SAAA,EACE,KADF,CADD,eAIC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,CAJD,CADD;AAQA,OATW;AAPH,KAAV,CAJD,CADD,eAwBC,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY;AAAC,MAAA,SAAS,EAAA,IAAV;AAAW,MAAA,MAAM,EAAE;AAAnB,KAAZ,eACC,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AAAC,MAAA,KAAK,EAAE,KAAK,CAAC,MAAN,CAAa,MAAb,GAAsB,CAA9B;AAAiC,MAAA,MAAM,EAAE,KAAzC;AAAgD,MAAA,OAAO,EAAC;AAAxD,KAAX,EACE,CAAC,CAAC,YAAD,CADH,CADD,eAIC,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;AACT,MAAA,EAAE,EAAC,OADM;AAET,MAAA,IAAI,EAAC,OAFI;AAGT,MAAA,KAAK,EAAE,KAAK,CAAC,KAHJ;AAIT,MAAA,OAAO,EAAE,UAJA;AAKT,MAAA,QAAQ,EAAE,cALD;AAMT,MAAA,UAAU,EAAE,KAAK,CAAC,MAAN,CAAa,GAAb,CAAiB,UAAC,KAAD,EAAQ,KAAR,EAAiB;AAC7C,4BACC,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,eACC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,UAAA,SAAS,EAAE,OAAO,CAAC,UAAzB;AAAqC,UAAA,GAAG,EAAE,WAAW;AAArD,SAAA,EACE,KADF,CADD,eAIC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,CAJD,CADD;AAQA,OATW;AANH,KAAV,CAJD,CAxBD,eA8CC,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY;AAAC,MAAA,SAAS,EAAA,IAAV;AAAW,MAAA,MAAM,EAAE;AAAnB,KAAZ,eACC,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AAAC,MAAA,KAAK,EAAE,WAAW,CAAC,MAAZ,CAAmB,MAAnB,GAA4B,CAApC;AAAuC,MAAA,MAAM,EAAE,KAA/C;AAAsD,MAAA,OAAO,EAAC;AAA9D,KAAX,EACE,CAAC,CAAC,kBAAD,CADH,CADD,eAIC,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;AACT,MAAA,EAAE,EAAC,aADM;AAET,MAAA,IAAI,EAAC,aAFI;AAGT,MAAA,SAAS,EAAA,IAHA;AAIT,MAAA,IAAI,EAAE,CAJG;AAKT,MAAA,KAAK,EAAE,WAAW,CAAC,KALV;AAMT,MAAA,OAAO,EAAE,QANA;AAOT,MAAA,QAAQ,EAAE,cAPD;AAQT,MAAA,UAAU,EAAE,WAAW,CAAC,MAAZ,CAAmB,GAAnB,CAAuB,UAAC,KAAD,EAAQ,KAAR,EAAiB;AACnD,4BACC,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,eACC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,UAAA,SAAS,EAAE,OAAO,CAAC,UAAzB;AAAqC,UAAA,GAAG,EAAE,iBAAiB;AAA3D,SAAA,EACE,KADF,CADD,eAIC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,CAJD,CADD;AAQA,OATW,CARH;AAkBT,MAAA,UAAU,EAAE;AAAE,QAAA,SAAS,EAAE,OAAO,CAAC;AAArB;AAlBH,KAAV,CAJD,CA9CD,CALQ;AA8ET,IAAA,OAAO,eACN,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,eACC,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,MAAA,KAAK,EAAC,WAAP;AAAmB,MAAA,OAAO,EAAE;AAA5B,KAAP,EACE,CAAC,CAAC,OAAD,CADH,CADD,eAIC,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,MAAA,KAAK,EAAC,SAAP;AAAiB,MAAA,OAAO,EAAE;AAA1B,KAAP,EACE,CAAC,CAAC,UAAD,CADH,CAJD;AA/EQ,GAAV,CADD;AA2FA,CAlJD;;AAoJA,cAAc,CAAC,SAAf,GAA2B;AAC1B,EAAA,IAAI,EAAE,SAAS,CAAC,IADU;AAE1B,EAAA,YAAY,EAAE,SAAS,CAAC,MAFE;AAG1B,EAAA,aAAa,EAAE,SAAS,CAAC,IAHC;AAI1B,EAAA,cAAc,EAAE,SAAS,CAAC,IAJA;AAK1B,EAAA,UAAU,EAAE,SAAS,CAAC,MALI;AAM1B,EAAA,WAAW,EAAE,SAAS,CAAC,MANG;AAO1B,EAAA,iBAAiB,EAAE,SAAS,CAAC;AAPH,CAA3B;AAUA,eAAe,cAAf","sourceRoot":"","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FormControl, InputLabel, TextField } from \"@material-ui/core\";\nimport { Button } from \"@esko/cloud-ui-components\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport useFormValidator from \"../../utils/formValidator\";\nimport MuiDialog from \"../Dialog/dialog\";\nconst styles = makeStyles(theme => ({\n    helperText: {\n        color: theme.palette.type === \"light\" ? theme.palette.error.main : theme.palette.error.contrastText,\n        fontSize: \"12px\"\n    },\n    textarea: {\n        resize: \"vertical\",\n        padding: 0\n    }\n}));\nconst AddGroupDialog = ({ open, handleOnClose, handleAddGroup, presetName, presetEmail, presetDescription, t }) => {\n    const { formState, handleOnChange, handleOnSubmit } = useFormValidator({\n        name: {\n            value: presetName || \"\",\n            errors: [],\n            validations: [\n                {\n                    type: \"maxLength\",\n                    limit: 64,\n                    errorMessage: val => `${t(\"errorMessages.cannotBeLongerThan\", { field: t(\"name\"), max: 64 })} ( ${t(\"current\")}:  ${val.length})`\n                },\n                {\n                    type: \"required\",\n                    errorMessage: t(\"errorMessages.fieldIsRequired\", { field: t(\"name\") })\n                }\n            ]\n        },\n        description: {\n            value: presetDescription || \"\",\n            errors: [],\n            validations: [\n                {\n                    type: \"maxLength\",\n                    limit: 255,\n                    errorMessage: val => `${t(\"errorMessages.cannotBeLongerThan\", { field: t(\"description\"), max: 255 })} ( ${t(\"current\")}:  ${val.length})`\n                }\n            ]\n        },\n        email: {\n            value: presetEmail || \"\",\n            errors: [],\n            validations: [\n                {\n                    type: \"maxLength\",\n                    limit: 100,\n                    errorMessage: val => `${t(\"errorMessages.cannotBeLongerThan\", { field: t(\"email\"), max: 100 })} ( ${t(\"current\")}:  ${val.length})`\n                },\n                {\n                    type: \"emailFormat\",\n                    errorMessage: t(\"errorMessages.enterValidField\", { field: t(\"emailFormat\") })\n                }\n            ]\n        }\n    }, handleAddGroup);\n    const { name, description, email } = formState;\n    const classes = styles();\n    return (React.createElement(MuiDialog, { className: classes.dialogContainer, title: t(\"addGroup\"), open: open, content: React.createElement(React.Fragment, null,\n            React.createElement(FormControl, { fullWidth: true, margin: \"normal\" },\n                React.createElement(InputLabel, { error: name.errors.length > 0, required: true, shrink: false, htmlFor: \"name\" }, t(\"name\")),\n                React.createElement(TextField, { id: \"name\", name: \"name\", autoFocus: true, value: name.value, variant: \"outlined\", onChange: handleOnChange, helperText: name.errors.map((error, index) => {\n                        return (React.createElement(React.Fragment, null,\n                            React.createElement(\"span\", { className: classes.helperText, key: \"nameError_\" + index }, error),\n                            React.createElement(\"br\", null)));\n                    }) })),\n            React.createElement(FormControl, { fullWidth: true, margin: \"normal\" },\n                React.createElement(InputLabel, { error: email.errors.length > 0, shrink: false, htmlFor: \"email\" }, t(\"groupEmail\")),\n                React.createElement(TextField, { id: \"email\", name: \"email\", value: email.value, variant: \"outlined\", onChange: handleOnChange, helperText: email.errors.map((error, index) => {\n                        return (React.createElement(React.Fragment, null,\n                            React.createElement(\"span\", { className: classes.helperText, key: \"email_\" + index }, error),\n                            React.createElement(\"br\", null)));\n                    }) })),\n            React.createElement(FormControl, { fullWidth: true, margin: \"normal\" },\n                React.createElement(InputLabel, { error: description.errors.length > 0, shrink: false, htmlFor: \"description\" }, t(\"groupDescription\")),\n                React.createElement(TextField, { id: \"description\", name: \"description\", multiline: true, rows: 4, value: description.value, variant: \"filled\", onChange: handleOnChange, helperText: description.errors.map((error, index) => {\n                        return (React.createElement(React.Fragment, null,\n                            React.createElement(\"span\", { className: classes.helperText, key: \"description_\" + index }, error),\n                            React.createElement(\"br\", null)));\n                    }), inputProps: { className: classes.textarea } }))), actions: React.createElement(React.Fragment, null,\n            React.createElement(Button, { color: \"secondary\", onClick: handleOnClose }, t(\"close\")),\n            React.createElement(Button, { color: \"primary\", onClick: handleOnSubmit }, t(\"addGroup\"))) }));\n};\nAddGroupDialog.propTypes = {\n    open: PropTypes.bool,\n    organization: PropTypes.string,\n    handleOnClose: PropTypes.func,\n    handleAddGroup: PropTypes.func,\n    presetName: PropTypes.string,\n    presetEmail: PropTypes.string,\n    presetDescription: PropTypes.string\n};\nexport default AddGroupDialog;\n//# sourceMappingURL=addGroupDialog.js.map"]},"metadata":{},"sourceType":"module"}