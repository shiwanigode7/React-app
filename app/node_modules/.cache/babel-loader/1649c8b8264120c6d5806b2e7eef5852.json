{"ast":null,"code":"/*\n* parse a date Object to \"MMM dd, yyyy, HH:mm\" e.g. Apr 22, 2021, 2:33 PM\n*/\nexport var timeFormatter = function timeFormatter(dateTime, lang) {\n  if (!Object.prototype.toString.call(dateTime) === \"[object Date]\") {\n    return \"Invalid Date\";\n  }\n\n  var formattedDate;\n\n  try {\n    formattedDate = Intl.DateTimeFormat(lang || navigator.language, {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n      hour: \"numeric\",\n      minute: \"numeric\",\n      hour12: true\n    }).format(dateTime);\n  } catch (err) {\n    formattedDate = dateTime.toString();\n  }\n\n  return formattedDate;\n};\n/*\n* Parse the revision string format in esko sites: \"rev\": \"0.0.1252402.2021-04-22t18-33-45-029z\"\n* to: 0.0.1252402\n* and: \"MMM dd, yyyy, HH:mm\" e.g. Apr 22, 2021, 2:33 PM\n*/\n\nexport var parseRevision = function parseRevision(rev, lang) {\n  var version = rev && \"Ver. \" + rev.split(\".\").filter(function (val, i) {\n    return i < 3;\n  }).join(\".\") || \"\";\n  var revDate = rev && rev.match(/(\\d{4})[\\-](\\d{2})\\-(\\d{2})t(\\d{2})[\\-\\:](\\d{2})[\\-\\:](\\d{2})/g);\n  revDate = Array.isArray(revDate) && revDate.length && revDate[0].split(\"t\").map(function (d, i) {\n    return i == 1 ? d.split(\"-\").join(\":\") : d;\n  }).join(\"T\") || \"\";\n  var appVersionDate = revDate && \"Date: \" + timeFormatter(new Date(revDate + '.000Z'), lang) || \"\";\n  var dateObject = revDate && new Date(revDate + '.000Z') || \"\";\n  return {\n    version: version,\n    date: appVersionDate,\n    dateObject: dateObject,\n    raw: rev\n  };\n};","map":{"version":3,"sources":["../../../src/utils/dateTime.js"],"names":[],"mappings":"AACA;;AAEE;AACF,OAAO,IAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,QAAD,EAAW,IAAX,EAAmB;AAC5C,MAAG,CAAC,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,QAA/B,CAAD,KAA8C,eAAjD,EAAkE;AAC9D,WAAO,cAAP;AACH;;AACD,MAAI,aAAJ;;AACA,MAAI;AACA,IAAA,aAAa,GAAG,IAAI,CAAC,cAAL,CAAoB,IAAI,IAAI,SAAS,CAAC,QAAtC,EAAgD;AAC5D,MAAA,KAAK,EAAE,OADqD;AAE5D,MAAA,GAAG,EAAE,SAFuD;AAG5D,MAAA,IAAI,EAAE,SAHsD;AAI5D,MAAA,IAAI,EAAE,SAJsD;AAK5D,MAAA,MAAM,EAAE,SALoD;AAM5D,MAAA,MAAM,EAAE;AANoD,KAAhD,EAOb,MAPa,CAON,QAPM,CAAhB;AAQH,GATD,CASE,OAAM,GAAN,EAAW;AACT,IAAA,aAAa,GAAG,QAAQ,CAAC,QAAT,EAAhB;AACH;;AACD,SAAO,aAAP;AACH,CAlBM;AAqBP;;;;AAIE;;AAEF,OAAO,IAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,GAAD,EAAM,IAAN,EAAc;AACvC,MAAM,OAAO,GAAI,GAAG,IAAI,UAAU,GAAG,CAAC,KAAJ,CAAU,GAAV,EAAe,MAAf,CAAsB,UAAC,GAAD,EAAK,CAAL;AAAA,WAAS,CAAC,GAAC,CAAX;AAAA,GAAtB,EAAoC,IAApC,CAAyC,GAAzC,CAAlB,IAAoE,EAApF;AACA,MAAI,OAAO,GAAG,GAAG,IAAI,GAAG,CAAC,KAAJ,CAAU,gEAAV,CAArB;AACA,EAAA,OAAO,GAAG,KAAK,CAAC,OAAN,CAAc,OAAd,KAA0B,OAAO,CAAC,MAAlC,IAA4C,OAAO,CAAC,CAAD,CAAP,CAAW,KAAX,CAAiB,GAAjB,EAAsB,GAAtB,CAA0B,UAAC,CAAD,EAAG,CAAH;AAAA,WAAO,CAAC,IAAE,CAAH,GAAO,CAAC,CAAC,KAAF,CAAQ,GAAR,EAAa,IAAb,CAAkB,GAAlB,CAAP,GAA+B,CAAtC;AAAA,GAA1B,EAAmE,IAAnE,CAAwE,GAAxE,CAA5C,IAA4H,EAAtI;AACA,MAAM,cAAc,GAAI,OAAO,IAAI,WAAW,aAAa,CAAC,IAAI,IAAJ,CAAS,OAAO,GAAC,OAAjB,CAAD,EAA4B,IAA5B,CAApC,IAA4E,EAAnG;AACA,MAAM,UAAU,GAAI,OAAO,IAAI,IAAI,IAAJ,CAAS,OAAO,GAAG,OAAnB,CAAZ,IAA4C,EAA/D;AAEA,SAAQ;AAAC,IAAA,OAAO,EAAP,OAAD;AAAU,IAAA,IAAI,EAAC,cAAf;AAA+B,IAAA,UAAU,EAAV,UAA/B;AAA2C,IAAA,GAAG,EAAE;AAAhD,GAAR;AACH,CARM","sourceRoot":"","sourcesContent":["/*\n* parse a date Object to \"MMM dd, yyyy, HH:mm\" e.g. Apr 22, 2021, 2:33 PM\n*/\nexport const timeFormatter = (dateTime, lang) => {\n    if (!Object.prototype.toString.call(dateTime) === \"[object Date]\") {\n        return \"Invalid Date\";\n    }\n    let formattedDate;\n    try {\n        formattedDate = Intl.DateTimeFormat(lang || navigator.language, {\n            month: 'short',\n            day: 'numeric',\n            year: 'numeric',\n            hour: \"numeric\",\n            minute: \"numeric\",\n            hour12: true\n        }).format(dateTime);\n    }\n    catch (err) {\n        formattedDate = dateTime.toString();\n    }\n    return formattedDate;\n};\n/*\n* Parse the revision string format in esko sites: \"rev\": \"0.0.1252402.2021-04-22t18-33-45-029z\"\n* to: 0.0.1252402\n* and: \"MMM dd, yyyy, HH:mm\" e.g. Apr 22, 2021, 2:33 PM\n*/\nexport const parseRevision = (rev, lang) => {\n    const version = (rev && \"Ver. \" + rev.split(\".\").filter((val, i) => i < 3).join(\".\")) || \"\";\n    let revDate = rev && rev.match(/(\\d{4})[\\-](\\d{2})\\-(\\d{2})t(\\d{2})[\\-\\:](\\d{2})[\\-\\:](\\d{2})/g);\n    revDate = Array.isArray(revDate) && revDate.length && revDate[0].split(\"t\").map((d, i) => i == 1 ? d.split(\"-\").join(\":\") : d).join(\"T\") || \"\";\n    const appVersionDate = (revDate && \"Date: \" + timeFormatter(new Date(revDate + '.000Z'), lang)) || \"\";\n    const dateObject = (revDate && new Date(revDate + '.000Z')) || \"\";\n    return ({ version, date: appVersionDate, dateObject, raw: rev });\n};\n//# sourceMappingURL=dateTime.js.map"]},"metadata":{},"sourceType":"module"}