{"ast":null,"code":"import Service from '@esko/cloud-service-utils/Service';\nimport { parseRevision } from \"../../utils/dateTime\";\nvar currentApp = window.location.host.split(\".\").splice(0, 1).join(\"\");\nvar currAppService = new Service(currentApp);\nexport var getCurrentAppVersion = function getCurrentAppVersion(lang) {\n  return new Promise(function (resolve, reject) {\n    currAppService.get([\"version.json\"]).then(function (data) {\n      var rev = data.rev;\n\n      var _parseRevision = parseRevision(rev, lang),\n          version = _parseRevision.version,\n          date = _parseRevision.date,\n          dateObject = _parseRevision.dateObject,\n          raw = _parseRevision.raw;\n\n      resolve({\n        version: version,\n        date: date,\n        dateObject: dateObject,\n        raw: raw\n      });\n    }, function (err) {\n      reject(err);\n    });\n  });\n};","map":{"version":3,"sources":["../../../../src/data/requests/version.js"],"names":[],"mappings":"AAAA,OAAO,OAAP,MAAoB,mCAApB;AACA,SAAQ,aAAR,QAA4B,sBAA5B;AAEA,IAAM,UAAU,GAAG,MAAM,CAAC,QAAP,CAAgB,IAAhB,CAClB,KADkB,CACZ,GADY,EAElB,MAFkB,CAEX,CAFW,EAER,CAFQ,EAGlB,IAHkB,CAGb,EAHa,CAAnB;AAKA,IAAM,cAAc,GAAG,IAAI,OAAJ,CAAY,UAAZ,CAAvB;AAEA,OAAO,IAAM,oBAAoB,GAAG,SAAvB,oBAAuB,CAAC,IAAD,EAAQ;AACxC,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AAClC,IAAA,cAAc,CAAC,GAAf,CAAmB,CAAC,cAAD,CAAnB,EAAqC,IAArC,CAA0C,UAAA,IAAI,EAAE;AAC7C,UAAM,GAAG,GAAG,IAAI,CAAC,GAAjB;;AACA,2BAAyC,aAAa,CAAC,GAAD,EAAM,IAAN,CAAtD;AAAA,UAAO,OAAP,kBAAO,OAAP;AAAA,UAAgB,IAAhB,kBAAgB,IAAhB;AAAA,UAAsB,UAAtB,kBAAsB,UAAtB;AAAA,UAAkC,GAAlC,kBAAkC,GAAlC;;AACA,MAAA,OAAO,CAAC;AAAC,QAAA,OAAO,EAAP,OAAD;AAAU,QAAA,IAAI,EAAJ,IAAV;AAAgB,QAAA,UAAU,EAAV,UAAhB;AAA4B,QAAA,GAAG,EAAH;AAA5B,OAAD,CAAP;AACH,KAJA,EAIE,UAAA,GAAG,EAAE;AACJ,MAAA,MAAM,CAAC,GAAD,CAAN;AACH,KANA;AAOJ,GARM,CAAP;AASH,CAVM","sourceRoot":"","sourcesContent":["import Service from '@esko/cloud-service-utils/Service';\nimport { parseRevision } from \"../../utils/dateTime\";\nconst currentApp = window.location.host\n    .split(\".\")\n    .splice(0, 1)\n    .join(\"\");\nconst currAppService = new Service(currentApp);\nexport const getCurrentAppVersion = (lang) => {\n    return new Promise((resolve, reject) => {\n        currAppService.get([\"version.json\"]).then(data => {\n            const rev = data.rev;\n            const { version, date, dateObject, raw } = parseRevision(rev, lang);\n            resolve({ version, date, dateObject, raw });\n        }, err => {\n            reject(err);\n        });\n    });\n};\n//# sourceMappingURL=version.js.map"]},"metadata":{},"sourceType":"module"}