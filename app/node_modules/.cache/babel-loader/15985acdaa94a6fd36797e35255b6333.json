{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Service from '@esko/cloud-service-utils/Service';\nimport Fetch from './fetch';\nexport var repoService = new Service(\"repo\");\nexport var removeAvatar = function removeAvatar(userNodePath, onSuccess, onError) {\n  console.log(repoService._url);\n  repoService.fetch(\"DELETE\", [\"CONTENT\", \"v0\"].concat(_toConsumableArray(userNodePath.split(\"/\")), [\"userMetaData\"]), {\n    contentid: \"thumbnail-200x200\"\n  }).then(function (data) {\n    typeof onSuccess === \"function\" ? onSuccess(data) : console.log(data);\n  }, function (err) {\n    typeof onError === \"function\" ? onError(error) : console.log(error);\n  });\n};\nexport var uplaodAvatar = function uplaodAvatar(userNodePath, fileBlob, onSuccess, onError) {\n  var file = fileBlob;\n  var timer;\n  var currentApp = window.location.host.split(\".\").splice(0, 1).join(\"\"); //Upload url is constructed based on current user path.\n\n  repoService.post([\"CONTENT\", \"v0\"].concat(_toConsumableArray(userNodePath.split(\"/\")), [\"userMetaData\"]), null, null, {\n    contentid: \"thumbnail-200x200\",\n    s3uri: true,\n    overwrite: true,\n    version: 1\n  }).then(function (data) {\n    function ping() {\n      ws.send(JSON.stringify({\n        \"status\": 102,\n        \"path\": \"\",\n        \"contentId\": \"\",\n        \"progress\": 0,\n        \"versionId\": \"\",\n        \"eTag\": \"\"\n      }));\n    }\n\n    function pong() {\n      clearTimeout(timer);\n    }\n\n    if (\"WebSocket\" in window) {\n      // Let us open a web socket\n      var ws = new WebSocket(window.location.origin.replace(currentApp, \"repo\").replace('http', 'ws') + \"/\" + data.statusUri);\n\n      ws.onopen = function () {\n        // Web Socket is connected, send data using send()\n        console.log(data);\n        timer = setInterval(ping, 30000);\n        var headers = {\n          contentType: \"binary/octet-stream\"\n        };\n        Fetch.put({\n          url: data.contentUri,\n          body: file,\n          headers: headers,\n          blob: true\n        }).then(function (data, textStatus, request) {\n          ws.send(JSON.stringify({\n            \"status\": 200,\n            \"path\": \"\",\n            \"contentId\": \"\",\n            \"progress\": 0,\n            \"versionId\": \"\",\n            \"eTag\": \"\"\n          }));\n          typeof onSuccess === \"function\" ? onSuccess(\"complete\") : console.log('Avatar uplaoded');\n        }, function (data, textStatus, request) {\n          ws.send(JSON.stringify({\n            \"status\": 500,\n            \"path\": \"\",\n            \"contentId\": \"\",\n            \"progress\": 0,\n            \"versionId\": \"\",\n            \"eTag\": \"\"\n          }));\n          typeof onError === \"function\" ? onError(error) : console.log(error);\n        });\n      };\n    }\n\n    ws.onmessage = function (evt) {\n      var msg = evt.data;\n\n      if (msg != 'inProgress') {\n        pong();\n        return;\n      } else {\n        console.log(\"uplaoding:\", msg);\n      }\n    };\n\n    ws.onclose = function () {\n      pong();\n    };\n  }, function (error) {\n    typeof onError === \"function\" ? onError(error) : console.log(error);\n  });\n};\nexport var checkACL = function checkACL(_ref) {\n  var _ref$nodePath = _ref.nodePath,\n      nodePath = _ref$nodePath === void 0 ? [] : _ref$nodePath,\n      _ref$effective = _ref.effective,\n      effective = _ref$effective === void 0 ? true : _ref$effective,\n      _ref$user = _ref.user,\n      user = _ref$user === void 0 ? true : _ref$user;\n  return repoService.get([\"ACL\", \"v0\"].concat(_toConsumableArray(nodePath)), {\n    effective: effective,\n    user: user\n  });\n};","map":{"version":3,"sources":["../../../../src/data/requests/repo.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import Service from '@esko/cloud-service-utils/Service';\nimport Fetch from './fetch';\nexport const repoService = new Service(\"repo\");\nexport const removeAvatar = (userNodePath, onSuccess, onError) => {\n    console.log(repoService._url);\n    repoService.fetch(\"DELETE\", [\"CONTENT\", \"v0\", ...userNodePath.split(\"/\"), \"userMetaData\"], { contentid: \"thumbnail-200x200\" }).then(data => {\n        typeof onSuccess === \"function\" ? onSuccess(data) : console.log(data);\n    }, err => {\n        typeof onError === \"function\" ? onError(error) : console.log(error);\n    });\n};\nexport const uplaodAvatar = (userNodePath, fileBlob, onSuccess, onError) => {\n    const file = fileBlob;\n    var timer;\n    const currentApp = window.location.host.split(\".\").splice(0, 1).join(\"\");\n    //Upload url is constructed based on current user path.\n    repoService.post([\"CONTENT\", \"v0\", ...userNodePath.split(\"/\"), \"userMetaData\"], null, null, {\n        contentid: \"thumbnail-200x200\",\n        s3uri: true,\n        overwrite: true,\n        version: 1\n    }).then(function (data) {\n        function ping() {\n            ws.send(JSON.stringify({ \"status\": 102, \"path\": \"\", \"contentId\": \"\", \"progress\": 0, \"versionId\": \"\", \"eTag\": \"\" }));\n        }\n        function pong() {\n            clearTimeout(timer);\n        }\n        if (\"WebSocket\" in window) {\n            // Let us open a web socket\n            var ws = new WebSocket(window.location.origin.replace(currentApp, \"repo\").replace('http', 'ws') + \"/\" + data.statusUri);\n            ws.onopen = function () {\n                // Web Socket is connected, send data using send()\n                console.log(data);\n                timer = setInterval(ping, 30000);\n                const headers = {\n                    contentType: \"binary/octet-stream\",\n                };\n                Fetch.put({ url: data.contentUri, body: file, headers: headers, blob: true }).then(function (data, textStatus, request) {\n                    ws.send(JSON.stringify({ \"status\": 200, \"path\": \"\", \"contentId\": \"\", \"progress\": 0, \"versionId\": \"\", \"eTag\": \"\" }));\n                    typeof onSuccess === \"function\" ? onSuccess(\"complete\") : console.log('Avatar uplaoded');\n                }, function (data, textStatus, request) {\n                    ws.send(JSON.stringify({ \"status\": 500, \"path\": \"\", \"contentId\": \"\", \"progress\": 0, \"versionId\": \"\", \"eTag\": \"\" }));\n                    typeof onError === \"function\" ? onError(error) : console.log(error);\n                });\n            };\n        }\n        ws.onmessage = function (evt) {\n            var msg = evt.data;\n            if (msg != 'inProgress') {\n                pong();\n                return;\n            }\n            else {\n                console.log(\"uplaoding:\", msg);\n            }\n        };\n        ws.onclose = function () {\n            pong();\n        };\n    }, function (error) {\n        typeof onError === \"function\" ? onError(error) : console.log(error);\n    });\n};\nexport const checkACL = ({ nodePath = [], effective = true, user = true }) => {\n    return repoService.get([\"ACL\", \"v0\", ...nodePath], { effective, user });\n};\n//# sourceMappingURL=repo.js.map"]},"metadata":{},"sourceType":"module"}