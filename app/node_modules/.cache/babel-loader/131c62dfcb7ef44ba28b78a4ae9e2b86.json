{"ast":null,"code":"export function hexEncode(str) {\n  var hex, i;\n  var result = \"\";\n\n  for (i = 0; i < str.length; i++) {\n    hex = str.charCodeAt(i).toString(16);\n    result += (\"000\" + hex).slice(-4);\n  }\n\n  return result;\n}\nexport function hexColor(str) {\n  var res = \"#\";\n  var i = 0;\n  var hexStr = hexEncode(str).replaceAll(\"0\", \"\").split(\"\").reverse();\n  var rgbPos = parseInt(hexStr.join(), 10) % 3;\n  var salt = hexStr.sort().pop();\n  var decimalSalt = parseInt(salt, 10);\n  salt = decimalSalt <= 5 ? (decimalSalt + 4).toString(16) : salt;\n\n  while (res.length < 7) {\n    //res += i % 2 ? salt + (hexStr[i] || salt) : (hexStr[i] || salt) + salt;\n    res += i == rgbPos ? salt + (hexStr[i] || salt) : (hexStr[i] || salt) + salt;\n    i++;\n  }\n\n  return res;\n}\nexport var sortArrayByStringProp = function sortArrayByStringProp(prop, order) {\n  var simepleSort = function simepleSort(a, b) {\n    var nameA, nameB;\n\n    if (typeof a[prop] == \"string\") {\n      nameA = a[prop].toUpperCase(); // ignore upper and lowercase\n\n      nameB = b[prop].toUpperCase(); // ignore upper and lowercase\n    } else {\n      nameA = a[prop];\n      nameB = b[prop];\n    }\n\n    var dir = order.toLowerCase() === \"asc\" ? 1 : -1;\n\n    if (nameA < nameB) {\n      return -dir;\n    }\n\n    if (nameA > nameB) {\n      return dir;\n    } // names must be equal\n\n\n    return 0;\n  };\n\n  return simepleSort;\n};","map":{"version":3,"sources":["../../../src/utils/strings.js"],"names":[],"mappings":"AAAA,OAAM,SAAW,SAAX,CAAqB,GAArB,EAAwB;AAC1B,MAAI,GAAJ,EAAS,CAAT;AAEA,MAAI,MAAM,GAAG,EAAb;;AACA,OAAK,CAAC,GAAC,CAAP,EAAU,CAAC,GAAC,GAAG,CAAC,MAAhB,EAAwB,CAAC,EAAzB,EAA6B;AACzB,IAAA,GAAG,GAAG,GAAG,CAAC,UAAJ,CAAe,CAAf,EAAkB,QAAlB,CAA2B,EAA3B,CAAN;AACA,IAAA,MAAM,IAAI,CAAC,QAAM,GAAP,EAAY,KAAZ,CAAkB,CAAC,CAAnB,CAAV;AACH;;AAED,SAAO,MAAP;AACH;AAED,OAAM,SAAU,QAAV,CAAmB,GAAnB,EAAsB;AACxB,MAAI,GAAG,GAAG,GAAV;AACA,MAAI,CAAC,GAAC,CAAN;AACA,MAAM,MAAM,GAAG,SAAS,CAAC,GAAD,CAAT,CAAe,UAAf,CAA0B,GAA1B,EAA8B,EAA9B,EAAkC,KAAlC,CAAwC,EAAxC,EAA4C,OAA5C,EAAf;AACA,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAP,EAAD,EAAe,EAAf,CAAR,GAA6B,CAA5C;AACA,MAAI,IAAI,GAAG,MAAM,CAAC,IAAP,GAAc,GAAd,EAAX;AACA,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAD,EAAM,EAAN,CAA5B;AACA,EAAA,IAAI,GAAG,WAAW,IAAI,CAAf,GAAmB,CAAC,WAAW,GAAG,CAAf,EAAkB,QAAlB,CAA2B,EAA3B,CAAnB,GAAoD,IAA3D;;AACA,SAAM,GAAG,CAAC,MAAJ,GAAa,CAAnB,EAAsB;AAClB;AACA,IAAA,GAAG,IAAI,CAAC,IAAI,MAAL,GAAc,IAAI,IAAI,MAAM,CAAC,CAAD,CAAN,IAAa,IAAjB,CAAlB,GAA2C,CAAC,MAAM,CAAC,CAAD,CAAN,IAAa,IAAd,IAAsB,IAAxE;AACA,IAAA,CAAC;AACJ;;AACD,SAAO,GAAP;AACH;AAED,OAAQ,IAAM,qBAAqB,GAAG,SAAxB,qBAAwB,CAAC,IAAD,EAAO,KAAP,EAAgB;AAElD,MAAM,WAAW,GAAG,SAAd,WAAc,CAAC,CAAD,EAAI,CAAJ,EAAS;AAC3B,QAAI,KAAJ,EAAW,KAAX;;AACA,QAAG,OAAO,CAAC,CAAC,IAAD,CAAR,IAAkB,QAArB,EAA8B;AAC1B,MAAA,KAAK,GAAG,CAAC,CAAC,IAAD,CAAD,CAAQ,WAAR,EAAR,CAD0B,CACK;;AAC/B,MAAA,KAAK,GAAG,CAAC,CAAC,IAAD,CAAD,CAAQ,WAAR,EAAR,CAF0B,CAEK;AAClC,KAHD,MAGO;AACH,MAAA,KAAK,GAAG,CAAC,CAAC,IAAD,CAAT;AACA,MAAA,KAAK,GAAG,CAAC,CAAC,IAAD,CAAT;AACH;;AAED,QAAM,GAAG,GAAG,KAAK,CAAC,WAAN,OAAwB,KAAxB,GAAgC,CAAhC,GAAoC,CAAC,CAAjD;;AAEA,QAAI,KAAK,GAAG,KAAZ,EAAmB;AACjB,aAAO,CAAC,GAAR;AACD;;AACD,QAAI,KAAK,GAAG,KAAZ,EAAmB;AACjB,aAAO,GAAP;AACD,KAjB0B,CAmB3B;;;AACA,WAAO,CAAP;AACD,GArBD;;AAuBA,SAAO,WAAP;AACH,CA1BO","sourceRoot":"","sourcesContent":["export function hexEncode(str) {\n    var hex, i;\n    var result = \"\";\n    for (i = 0; i < str.length; i++) {\n        hex = str.charCodeAt(i).toString(16);\n        result += (\"000\" + hex).slice(-4);\n    }\n    return result;\n}\nexport function hexColor(str) {\n    let res = \"#\";\n    let i = 0;\n    const hexStr = hexEncode(str).replaceAll(\"0\", \"\").split(\"\").reverse();\n    const rgbPos = parseInt(hexStr.join(), 10) % 3;\n    let salt = hexStr.sort().pop();\n    const decimalSalt = parseInt(salt, 10);\n    salt = decimalSalt <= 5 ? (decimalSalt + 4).toString(16) : salt;\n    while (res.length < 7) {\n        //res += i % 2 ? salt + (hexStr[i] || salt) : (hexStr[i] || salt) + salt;\n        res += i == rgbPos ? salt + (hexStr[i] || salt) : (hexStr[i] || salt) + salt;\n        i++;\n    }\n    return res;\n}\nexport const sortArrayByStringProp = (prop, order) => {\n    const simepleSort = (a, b) => {\n        let nameA, nameB;\n        if (typeof a[prop] == \"string\") {\n            nameA = a[prop].toUpperCase(); // ignore upper and lowercase\n            nameB = b[prop].toUpperCase(); // ignore upper and lowercase\n        }\n        else {\n            nameA = a[prop];\n            nameB = b[prop];\n        }\n        const dir = order.toLowerCase() === \"asc\" ? 1 : -1;\n        if (nameA < nameB) {\n            return -dir;\n        }\n        if (nameA > nameB) {\n            return dir;\n        }\n        // names must be equal\n        return 0;\n    };\n    return simepleSort;\n};\n//# sourceMappingURL=strings.js.map"]},"metadata":{},"sourceType":"module"}