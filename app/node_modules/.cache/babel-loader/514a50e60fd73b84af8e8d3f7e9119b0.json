{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Service from \"@esko/cloud-service-utils/Service\";\nimport { searchInAccount, searchService } from \"./search\";\nvar iamAPIURL_v3 = [\"rest\", \"V3\", \"iam\"];\nvar iamAPIURL = [\"rest\", \"iam\"];\nexport var iamService = new Service(\"iam\");\nexport var getOrganizations = function getOrganizations(includeEmpty) {\n  return iamService.get([].concat(iamAPIURL_v3, [\"organizations\"]), {\n    subscriptionFree: true\n  });\n};\nexport var savePreferences = function savePreferences(org, userEmail, preferences) {\n  return iamService.put([].concat(iamAPIURL, [\"organizations\", org, \"users\", userEmail]), Object.assign({}, preferences));\n};\nexport var getUserInfo = function getUserInfo(filterBy) {\n  var filter = filterBy && (filterBy === null || filterBy === void 0 ? void 0 : filterBy.organization) ? {\n    org: filterBy.organization\n  } : {};\n  return new Promise(function (resolve, reject) {\n    iamService.get([].concat(iamAPIURL, [\"getCurrentUserInfo\"]), Object.assign({}, filter)).then(function (usrData) {\n      var usrInfo = {\n        allData: usrData,\n        repoid: usrData.repoid,\n        firstName: usrData.firstName,\n        lastName: usrData.surName,\n        displayName: usrData.displayName,\n        type: usrData.type,\n        userid: usrData.userid,\n        isAccountCreator: usrData.isAccountCreator,\n        userLanguage: usrData.userLanguage,\n        path: usrData.path,\n        email: usrData.email,\n        entitlement: usrData.entitlement,\n        nodeType: usrData.nodeType,\n        creationDate: usrData.creationDate,\n        displayEmail: usrData.displayEmail,\n        organizationID: usrData.organizationID,\n        userType: usrData.userType,\n        nodeId: usrData.nodeId\n      };\n      var metadataQuery = {\n        query: {\n          bool: {\n            must: [{\n              prefix: {\n                path: {\n                  value: usrData.path\n                }\n              }\n            }, {\n              terms: {\n                \"ec_s@type\": [\"userMetaData\"]\n              }\n            }]\n          }\n        },\n        sort: [{\n          \"ec_s@type\": {\n            order: \"asc\"\n          }\n        }]\n      };\n\n      if (usrData.path && usrData.organizationID) {\n        searchInAccount(metadataQuery, usrData.organizationID, \"nodes\", {\n          \"EskoCloud-Search-Thumbnails\": true\n        }).then(function (metadata) {\n          var _a, _b;\n\n          if ((_b = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.hits) === null || _a === void 0 ? void 0 : _a.hits) === null || _b === void 0 ? void 0 : _b.length) {\n            metadata.hits.hits.forEach(function (hit) {\n              if (hit._source) {\n                usrInfo = Object.assign(Object.assign({}, usrInfo), {\n                  allData: Object.assign(Object.assign({}, usrInfo.allData), hit._source)\n                });\n              }\n            });\n            usrInfo = Object.assign(Object.assign({}, usrInfo), {\n              avatar: usrInfo.allData[\"contentPath-S3-thumbnail-200x200\"] || \"\"\n            });\n          }\n\n          resolve(usrInfo);\n        }, function (err) {\n          resolve(usrInfo);\n        });\n      } else {\n        resolve(usrInfo);\n      }\n    }, function (err) {\n      reject(err);\n    });\n  });\n}; //multiple\n\nexport var getOrgUsers = function getOrgUsers(_ref) {\n  var organization = _ref.organization,\n      _ref$start = _ref.start,\n      start = _ref$start === void 0 ? 0 : _ref$start,\n      _ref$size = _ref.size,\n      length = _ref$size === void 0 ? 10 : _ref$size,\n      _ref$search = _ref.search,\n      search = _ref$search === void 0 ? \"\" : _ref$search,\n      _ref$sortBy = _ref.sortBy,\n      sortType = _ref$sortBy === void 0 ? \"name\" : _ref$sortBy,\n      _ref$sortDirection = _ref.sortDirection,\n      sortDir = _ref$sortDirection === void 0 ? \"asc\" : _ref$sortDirection,\n      _ref$filterType = _ref.filterType,\n      filterType = _ref$filterType === void 0 ? [] : _ref$filterType;\n  return iamService.get([].concat(iamAPIURL, [\"organizations\", organization, \"users\"]), {\n    start: start,\n    length: length,\n    search: search,\n    sortType: sortType,\n    sortDir: sortDir,\n    filterType: filterType\n  }, {\n    \"EskoCloud-Search-Thumbnails\": true\n  });\n};\nexport var getOrgUsersJoin = function getOrgUsersJoin(_ref2) {\n  var organization = _ref2.organization,\n      _ref2$start = _ref2.start,\n      start = _ref2$start === void 0 ? 0 : _ref2$start,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? 10 : _ref2$size,\n      _ref2$search = _ref2.search,\n      search = _ref2$search === void 0 ? \"\" : _ref2$search,\n      _ref2$sortBy = _ref2.sortBy,\n      sortBy = _ref2$sortBy === void 0 ? \"ec_s@surName\" : _ref2$sortBy,\n      _ref2$sortDirection = _ref2.sortDirection,\n      sortDirection = _ref2$sortDirection === void 0 ? \"asc\" : _ref2$sortDirection,\n      _ref2$filterType = _ref2.filterType,\n      filterType = _ref2$filterType === void 0 ? [] : _ref2$filterType,\n      _ref2$additionalFilte = _ref2.additionalFilters,\n      additionalFilters = _ref2$additionalFilte === void 0 ? [] : _ref2$additionalFilte;\n  var stageOneQuery = {\n    bool: {\n      must: [{\n        terms: {\n          \"ec_s@type\": [\"iam:user\"]\n        }\n      }, {\n        bool: {\n          should: [{\n            wildcard: {\n              \"ec_s@firstName.norm\": {\n                value: \"*\".concat(search, \"*\"),\n                boost: 1,\n                rewrite: \"constant_score\"\n              }\n            }\n          }, {\n            wildcard: {\n              \"ec_s@surName.norm\": {\n                value: \"*\".concat(search, \"*\"),\n                boost: 1,\n                rewrite: \"constant_score\"\n              }\n            }\n          }]\n        }\n      }]\n    }\n  };\n  var searchQuery = {\n    stages: [{\n      stageType: \"select\",\n      index: {\n        indexType: \"nodes\",\n        cloudAccount: organization\n      },\n      query: {\n        from: start,\n        size: size,\n        sort: [_defineProperty({}, sortBy + \".norm\", sortDirection)],\n        query: stageOneQuery.bool.must.concat(additionalFilters)\n      }\n    }, {\n      stageType: \"select\",\n      index: {\n        indexType: \"nodes\",\n        cloudAccount: organization\n      },\n      query: {\n        from: 0,\n        size: 10000,\n        query: {\n          bool: {\n            must: [{\n              terms: {\n                \"ec_s@type\": [\"userMetaData\"]\n              }\n            }, {\n              terms: {\n                parentNodeId: [\"{{0:/hits/hits:/_source/nodeId}}\"]\n              }\n            }]\n          }\n        }\n      }\n    }, {\n      stageType: \"map\",\n      of: \"1:/hits/hits\",\n      template: [\"{{/_source}}\"]\n    }, {\n      stageType: \"join\",\n      of: 0,\n      on: {\n        \"/hits/hits:/_source/nodeId\": \"2:/:/parentNodeId\"\n      }\n    }]\n  };\n  return searchService.post([\"_esko\", \"join\"], searchQuery, {\n    \"EskoCloud-Search-Thumbnails\": true\n  });\n}; //single\n\nexport var getOrgUser = function getOrgUser(_ref4) {\n  var organization = _ref4.organization,\n      email = _ref4.email;\n  return iamService.get([].concat(iamAPIURL, [\"organizations\", organization, \"users\", email]));\n};\nexport var editOrgUser = function editOrgUser(_ref5) {\n  var organization = _ref5.organization,\n      email = _ref5.email,\n      body = _ref5.body;\n  return iamService.put([].concat(iamAPIURL, [\"organizations\", organization, \"users\", email]), body);\n};\nexport var checkUser = function checkUser(_ref6) {\n  var organization = _ref6.organization,\n      email = _ref6.email;\n  return iamService.get([].concat(iamAPIURL, [\"organizations\", organization, \"users\", email, \"ssocheck\"]));\n};\nexport var removeFromGroup = function removeFromGroup(_ref7) {\n  var organization = _ref7.organization,\n      email = _ref7.email,\n      groupNames = _ref7.groupNames;\n  var body = groupNames.map(function (name) {\n    return {\n      name: name\n    };\n  });\n  return iamService[\"delete\"]([].concat(iamAPIURL, [\"organizations\", organization, \"users\", email, \"groups\"]), body);\n};\nexport var addToGroup = function addToGroup(_ref8) {\n  var organization = _ref8.organization,\n      email = _ref8.email,\n      groupNames = _ref8.groupNames;\n  var body = groupNames.map(function (name) {\n    return {\n      name: name\n    };\n  });\n  return iamService.post([].concat(iamAPIURL, [\"organizations\", organization, \"users\", email, \"groups\"]), body);\n};\nexport var deleteOrgUsers = function deleteOrgUsers(_ref9) {\n  var organization = _ref9.organization,\n      users = _ref9.users;\n  return iamService[\"delete\"]([].concat(iamAPIURL, [\"organizations\", organization, \"users\"]), users);\n};\nexport var addOrgUsers = function addOrgUsers(_ref10) {\n  var organization = _ref10.organization,\n      body = _ref10.body;\n  return iamService.post([].concat(iamAPIURL, [\"organizations\", organization, \"users\"]), body);\n};\nexport var getOrgGroups = function getOrgGroups(_ref11) {\n  var organization = _ref11.organization,\n      _ref11$start = _ref11.start,\n      start = _ref11$start === void 0 ? 0 : _ref11$start,\n      _ref11$size = _ref11.size,\n      length = _ref11$size === void 0 ? 10 : _ref11$size,\n      _ref11$search = _ref11.search,\n      search = _ref11$search === void 0 ? \"\" : _ref11$search,\n      _ref11$sortBy = _ref11.sortBy,\n      sortType = _ref11$sortBy === void 0 ? \"groupName\" : _ref11$sortBy,\n      _ref11$sortDirection = _ref11.sortDirection,\n      sortDir = _ref11$sortDirection === void 0 ? \"asc\" : _ref11$sortDirection,\n      _ref11$filterType = _ref11.filterType,\n      filterType = _ref11$filterType === void 0 ? [] : _ref11$filterType;\n  return iamService.get([].concat(iamAPIURL, [\"organizations\", organization, \"groups\"]), {\n    start: start,\n    length: length,\n    search: search,\n    sortType: sortType,\n    sortDir: sortDir,\n    filterType: filterType\n  });\n};\nexport var addOrgGroup = function addOrgGroup(_ref12) {\n  var organization = _ref12.organization,\n      groupName = _ref12.groupName,\n      groupDescription = _ref12.groupDescription,\n      groupEmail = _ref12.groupEmail;\n  return iamService.post([].concat(iamAPIURL, [\"organizations\", organization, \"groups\"]), {\n    groupName: groupName,\n    groupEmail: groupEmail,\n    description: groupDescription\n  });\n};\nexport var deleteOrgGroups = function deleteOrgGroups(_ref13) {\n  var organization = _ref13.organization,\n      groupsToDelete = _ref13.groupsToDelete;\n  return iamService[\"delete\"]([].concat(iamAPIURL, [\"organizations\", organization, \"groups\"]), groupsToDelete);\n};\nexport var addOrgGroupMembers = function addOrgGroupMembers(_ref14) {\n  var organization = _ref14.organization,\n      groupName = _ref14.groupName,\n      membersToAdd = _ref14.membersToAdd;\n  return iamService.post([].concat(iamAPIURL, [\"organizations\", organization, \"groups\", groupName, \"members\"]), membersToAdd);\n};\nexport var removeOrgGroupMembers = function removeOrgGroupMembers(_ref15) {\n  var organization = _ref15.organization,\n      groupName = _ref15.groupName,\n      membersToRemove = _ref15.membersToRemove;\n  return iamService[\"delete\"]([].concat(iamAPIURL, [\"organizations\", organization, \"groups\", groupName, \"members\"]), membersToRemove);\n};\nexport var getOrgGroupMembers = function getOrgGroupMembers(_ref16) {\n  var organization = _ref16.organization,\n      _ref16$start = _ref16.start,\n      start = _ref16$start === void 0 ? 0 : _ref16$start,\n      _ref16$size = _ref16.size,\n      length = _ref16$size === void 0 ? 10 : _ref16$size,\n      _ref16$search = _ref16.search,\n      search = _ref16$search === void 0 ? \"\" : _ref16$search,\n      _ref16$sortBy = _ref16.sortBy,\n      sortType = _ref16$sortBy === void 0 ? \"groupName\" : _ref16$sortBy,\n      _ref16$sortDirection = _ref16.sortDirection,\n      sortDir = _ref16$sortDirection === void 0 ? \"asc\" : _ref16$sortDirection,\n      _ref16$searchType = _ref16.searchType,\n      searchType = _ref16$searchType === void 0 ? [] : _ref16$searchType,\n      groupName = _ref16.groupName;\n  return iamService.get([].concat(iamAPIURL, [\"organizations\", organization, \"groups\", groupName, \"members\"]), {\n    start: start,\n    length: length,\n    search: search,\n    sortType: sortType,\n    sortDir: sortDir,\n    searchType: searchType\n  });\n};","map":{"version":3,"sources":["../../../../src/data/requests/iam.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import Service from \"@esko/cloud-service-utils/Service\";\nimport { searchInAccount, searchService } from \"./search\";\nconst iamAPIURL_v3 = [\"rest\", \"V3\", \"iam\"];\nconst iamAPIURL = [\"rest\", \"iam\"];\nexport const iamService = new Service(\"iam\");\nexport const getOrganizations = includeEmpty => {\n    return iamService.get([...iamAPIURL_v3, \"organizations\"], { subscriptionFree: true });\n};\nexport const savePreferences = (org, userEmail, preferences) => {\n    return iamService.put([...iamAPIURL, \"organizations\", org, \"users\", userEmail], Object.assign({}, preferences));\n};\nexport const getUserInfo = filterBy => {\n    const filter = filterBy && (filterBy === null || filterBy === void 0 ? void 0 : filterBy.organization) ? { org: filterBy.organization } : {};\n    return new Promise((resolve, reject) => {\n        iamService.get([...iamAPIURL, \"getCurrentUserInfo\"], Object.assign({}, filter)).then(usrData => {\n            let usrInfo = {\n                allData: usrData,\n                repoid: usrData.repoid,\n                firstName: usrData.firstName,\n                lastName: usrData.surName,\n                displayName: usrData.displayName,\n                type: usrData.type,\n                userid: usrData.userid,\n                isAccountCreator: usrData.isAccountCreator,\n                userLanguage: usrData.userLanguage,\n                path: usrData.path,\n                email: usrData.email,\n                entitlement: usrData.entitlement,\n                nodeType: usrData.nodeType,\n                creationDate: usrData.creationDate,\n                displayEmail: usrData.displayEmail,\n                organizationID: usrData.organizationID,\n                userType: usrData.userType,\n                nodeId: usrData.nodeId\n            };\n            const metadataQuery = {\n                query: {\n                    bool: {\n                        must: [\n                            {\n                                prefix: {\n                                    path: {\n                                        value: usrData.path\n                                    }\n                                }\n                            },\n                            {\n                                terms: {\n                                    \"ec_s@type\": [\"userMetaData\"]\n                                }\n                            }\n                        ]\n                    }\n                },\n                sort: [\n                    {\n                        \"ec_s@type\": {\n                            order: \"asc\"\n                        }\n                    }\n                ]\n            };\n            if (usrData.path && usrData.organizationID) {\n                searchInAccount(metadataQuery, usrData.organizationID, \"nodes\", { \"EskoCloud-Search-Thumbnails\": true }).then(metadata => {\n                    var _a, _b;\n                    if ((_b = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.hits) === null || _a === void 0 ? void 0 : _a.hits) === null || _b === void 0 ? void 0 : _b.length) {\n                        metadata.hits.hits.forEach(hit => {\n                            if (hit._source) {\n                                usrInfo = Object.assign(Object.assign({}, usrInfo), { allData: Object.assign(Object.assign({}, usrInfo.allData), hit._source) });\n                            }\n                        });\n                        usrInfo = Object.assign(Object.assign({}, usrInfo), { avatar: usrInfo.allData[\"contentPath-S3-thumbnail-200x200\"] || \"\" });\n                    }\n                    resolve(usrInfo);\n                }, err => {\n                    resolve(usrInfo);\n                });\n            }\n            else {\n                resolve(usrInfo);\n            }\n        }, err => {\n            reject(err);\n        });\n    });\n};\n//multiple\nexport const getOrgUsers = ({ organization, start = 0, size: length = 10, search = \"\", sortBy: sortType = \"name\", sortDirection: sortDir = \"asc\", filterType = [] }) => {\n    return iamService.get([...iamAPIURL, \"organizations\", organization, \"users\"], {\n        start,\n        length,\n        search,\n        sortType,\n        sortDir,\n        filterType\n    }, { \"EskoCloud-Search-Thumbnails\": true });\n};\nexport const getOrgUsersJoin = ({ organization, start = 0, size = 10, search = \"\", sortBy = \"ec_s@surName\", sortDirection = \"asc\", filterType = [], additionalFilters = [] }) => {\n    const stageOneQuery = {\n        bool: {\n            must: [\n                {\n                    terms: {\n                        \"ec_s@type\": [\"iam:user\"]\n                    }\n                },\n                {\n                    bool: {\n                        should: [\n                            {\n                                wildcard: {\n                                    \"ec_s@firstName.norm\": {\n                                        value: `*${search}*`,\n                                        boost: 1,\n                                        rewrite: \"constant_score\"\n                                    }\n                                }\n                            },\n                            {\n                                wildcard: {\n                                    \"ec_s@surName.norm\": {\n                                        value: `*${search}*`,\n                                        boost: 1,\n                                        rewrite: \"constant_score\"\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    };\n    const searchQuery = {\n        stages: [\n            {\n                stageType: \"select\",\n                index: {\n                    indexType: \"nodes\",\n                    cloudAccount: organization\n                },\n                query: {\n                    from: start,\n                    size: size,\n                    sort: [\n                        {\n                            [sortBy + \".norm\"]: sortDirection\n                        }\n                    ],\n                    query: stageOneQuery.bool.must.concat(additionalFilters)\n                }\n            },\n            {\n                stageType: \"select\",\n                index: {\n                    indexType: \"nodes\",\n                    cloudAccount: organization\n                },\n                query: {\n                    from: 0,\n                    size: 10000,\n                    query: {\n                        bool: {\n                            must: [\n                                {\n                                    terms: {\n                                        \"ec_s@type\": [\"userMetaData\"]\n                                    }\n                                },\n                                {\n                                    terms: {\n                                        parentNodeId: [\"{{0:/hits/hits:/_source/nodeId}}\"]\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                }\n            },\n            {\n                stageType: \"map\",\n                of: \"1:/hits/hits\",\n                template: [\"{{/_source}}\"]\n            },\n            {\n                stageType: \"join\",\n                of: 0,\n                on: {\n                    \"/hits/hits:/_source/nodeId\": \"2:/:/parentNodeId\"\n                }\n            }\n        ]\n    };\n    return searchService.post([\"_esko\", \"join\"], searchQuery, { \"EskoCloud-Search-Thumbnails\": true });\n};\n//single\nexport const getOrgUser = ({ organization, email }) => {\n    return iamService.get([...iamAPIURL, \"organizations\", organization, \"users\", email]);\n};\nexport const editOrgUser = ({ organization, email, body }) => {\n    return iamService.put([...iamAPIURL, \"organizations\", organization, \"users\", email], body);\n};\nexport const checkUser = ({ organization, email }) => {\n    return iamService.get([...iamAPIURL, \"organizations\", organization, \"users\", email, \"ssocheck\"]);\n};\nexport const removeFromGroup = ({ organization, email, groupNames }) => {\n    const body = groupNames.map(name => ({ name: name }));\n    return iamService.delete([...iamAPIURL, \"organizations\", organization, \"users\", email, \"groups\"], body);\n};\nexport const addToGroup = ({ organization, email, groupNames }) => {\n    const body = groupNames.map(name => ({ name: name }));\n    return iamService.post([...iamAPIURL, \"organizations\", organization, \"users\", email, \"groups\"], body);\n};\nexport const deleteOrgUsers = ({ organization, users }) => {\n    return iamService.delete([...iamAPIURL, \"organizations\", organization, \"users\"], users);\n};\nexport const addOrgUsers = ({ organization, body }) => {\n    return iamService.post([...iamAPIURL, \"organizations\", organization, \"users\"], body);\n};\nexport const getOrgGroups = ({ organization, start = 0, size: length = 10, search = \"\", sortBy: sortType = \"groupName\", sortDirection: sortDir = \"asc\", filterType = [] }) => {\n    return iamService.get([...iamAPIURL, \"organizations\", organization, \"groups\"], {\n        start,\n        length,\n        search,\n        sortType,\n        sortDir,\n        filterType\n    });\n};\nexport const addOrgGroup = ({ organization, groupName, groupDescription, groupEmail }) => {\n    return iamService.post([...iamAPIURL, \"organizations\", organization, \"groups\"], {\n        groupName: groupName,\n        groupEmail: groupEmail,\n        description: groupDescription\n    });\n};\nexport const deleteOrgGroups = ({ organization, groupsToDelete }) => {\n    return iamService.delete([...iamAPIURL, \"organizations\", organization, \"groups\"], groupsToDelete);\n};\nexport const addOrgGroupMembers = ({ organization, groupName, membersToAdd }) => {\n    return iamService.post([...iamAPIURL, \"organizations\", organization, \"groups\", groupName, \"members\"], membersToAdd);\n};\nexport const removeOrgGroupMembers = ({ organization, groupName, membersToRemove }) => {\n    return iamService.delete([...iamAPIURL, \"organizations\", organization, \"groups\", groupName, \"members\"], membersToRemove);\n};\nexport const getOrgGroupMembers = ({ organization, start = 0, size: length = 10, search = \"\", sortBy: sortType = \"groupName\", sortDirection: sortDir = \"asc\", searchType = [], groupName }) => {\n    return iamService.get([...iamAPIURL, \"organizations\", organization, \"groups\", groupName, \"members\"], {\n        start,\n        length,\n        search,\n        sortType,\n        sortDir,\n        searchType\n    });\n};\n//# sourceMappingURL=iam.js.map"]},"metadata":{},"sourceType":"module"}