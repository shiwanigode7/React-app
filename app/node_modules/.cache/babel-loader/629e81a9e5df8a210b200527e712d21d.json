{"ast":null,"code":"import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { FormControlLabel, FormGroup, Typography, Link, Box, Popover, List, ListItem } from \"@material-ui/core\";\nimport { Checkbox } from \"../Checkbox\";\nimport PopupState, { bindTrigger, bindPopover } from 'material-ui-popup-state';\nvar selectToolsClasses = makeStyles(function (theme) {\n  return {\n    container: {\n      paddingRight: theme.spacing(1.25),\n      paddingLeft: theme.spacing(1.25)\n    },\n    selectedList: {\n      maxHeight: 400\n    },\n    action: {\n      cursor: \"pointer\"\n    }\n  };\n});\nexport var SelectAllToggler = function SelectAllToggler(props) {\n  var list = props.list,\n      total = props.total,\n      selected = props.selected,\n      selectKey = props.selectKey,\n      toggleSelectAll = props.toggleSelectAll,\n      _props$selectText = props.selectText,\n      selectText = _props$selectText === void 0 ? \"Select All\" : _props$selectText;\n  var loaded = list.length;\n  var classes = selectToolsClasses();\n  var togglerText = /*#__PURE__*/React.createElement(React.Fragment, null, selectText, \" \", /*#__PURE__*/React.createElement(Counter, Object.assign({}, props, {\n    loaded: loaded\n  })));\n  var allSelected = !!selected.length && !list.some(function (item) {\n    return !selected.includes(item[selectKey]);\n  });\n  return /*#__PURE__*/React.createElement(FormGroup, {\n    row: true,\n    className: clsx(classes.container)\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      color: \"primary\",\n      indeterminate: !allSelected && !!selected.length,\n      checked: allSelected,\n      onClick: toggleSelectAll\n    }),\n    label: togglerText\n  }));\n};\nexport var Counter = function Counter(props) {\n  var loaded = props.loaded,\n      template = props.template,\n      total = props.total;\n  var resolvedTemplate = template ? template : function (_ref) {\n    var loaded = _ref.loaded,\n        total = _ref.total;\n    return \"( \".concat(loaded, \" \").concat(total ? 'of ' + total : '', \" objects )\");\n  };\n  return /*#__PURE__*/React.createElement(Typography, {\n    component: \"span\"\n  }, resolvedTemplate({\n    loaded: loaded,\n    total: total\n  }));\n};\nexport var SelectCounter = function SelectCounter(props) {\n  var _props$selected = props.selected,\n      selected = _props$selected === void 0 ? [] : _props$selected,\n      _props$selectedData = props.selectedData,\n      selectedData = _props$selectedData === void 0 ? {} : _props$selectedData,\n      selectKey = props.selectKey,\n      selectedComponent = props.selectedComponent,\n      handleClearAll = props.handleClearAll,\n      handleSelect = props.handleSelect,\n      _props$selectedText = props.selectedText,\n      selectedText = _props$selectedText === void 0 ? \"Selected\" : _props$selectedText,\n      _props$clearText = props.clearText,\n      clearText = _props$clearText === void 0 ? \"Clear\" : _props$clearText;\n  var classes = selectToolsClasses();\n  var ResolvedSelectedComponent = selectedComponent ? selectedComponent : !!selectKey ? function (_ref2) {\n    var data = _ref2.data,\n        selectKey = _ref2.selectKey;\n    return /*#__PURE__*/React.createElement(\"span\", null, data[selectKey]);\n  } : \"\";\n  return /*#__PURE__*/React.createElement(Typography, {\n    component: \"span\",\n    className: clsx(classes.container)\n  }, ResolvedSelectedComponent && !!selected.length ? /*#__PURE__*/React.createElement(PopupState, {\n    variant: \"popover\",\n    popupId: \"show-selected\"\n  }, function (popupState) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, Object.assign({\n      component: \"span\",\n      className: clsx(classes.action),\n      fontSize: \"1rem\",\n      fontWeight: \"fontWeightBold\",\n      m: 1\n    }, bindTrigger(popupState)), \"\".concat(selected.length, \" \").concat(selectedText)), /*#__PURE__*/React.createElement(Popover, Object.assign({}, bindPopover(popupState), {\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      },\n      transformOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      }\n    }), /*#__PURE__*/React.createElement(List, {\n      className: clsx(classes.selectedList)\n    }, selected.map(function (val) {\n      return /*#__PURE__*/React.createElement(ListItem, {\n        key: val,\n        button: true,\n        onClick: function onClick(e) {\n          return handleSelect({\n            event: e,\n            value: selectedData[val][selectKey]\n          });\n        }\n      }, /*#__PURE__*/React.createElement(ResolvedSelectedComponent, {\n        data: selectedData[val],\n        selectKey: selectKey\n      }));\n    }))));\n  }) : /*#__PURE__*/React.createElement(Box, {\n    component: \"span\",\n    fontSize: \"1rem\",\n    fontWeight: \"fontWeightBold\",\n    m: 1\n  }, \"\".concat(selected.length, \" \").concat(selectedText)), !!selected.length && /*#__PURE__*/React.createElement(Link, {\n    href: \"#\",\n    onClick: handleClearAll\n  }, clearText));\n};","map":{"version":3,"sources":["../../../../src/components/DataView/selectTools.js"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,IAAP,MAAiB,MAAjB;AACA,SAAS,UAAT,QAA2B,0BAA3B;AACA,SAAS,gBAAT,EAA2B,SAA3B,EAAsC,UAAtC,EAAkD,IAAlD,EAAwD,GAAxD,EAA6D,OAA7D,EAAsE,IAAtE,EAA4E,QAA5E,QAA4F,mBAA5F;AACA,SAAS,QAAT,QAAyB,aAAzB;AACA,OAAO,UAAP,IAAqB,WAArB,EAAkC,WAAlC,QAAqD,yBAArD;AAGA,IAAM,kBAAkB,GAAG,UAAU,CAAC,UAAA,KAAK;AAAA,SAAK;AAC/C,IAAA,SAAS,EAAE;AACJ,MAAA,YAAY,EAAC,KAAK,CAAC,OAAN,CAAc,IAAd,CADT;AAEJ,MAAA,WAAW,EAAC,KAAK,CAAC,OAAN,CAAc,IAAd;AAFR,KADoC;AAK5C,IAAA,YAAY,EAAC;AACT,MAAA,SAAS,EAAC;AADD,KAL+B;AAQ5C,IAAA,MAAM,EAAC;AACH,MAAA,MAAM,EAAC;AADJ;AARqC,GAAL;AAAA,CAAN,CAArC;AAcA,OAAO,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAA,KAAK,EAAG;AACpC,MAAO,IAAP,GAAqF,KAArF,CAAO,IAAP;AAAA,MAAa,KAAb,GAAqF,KAArF,CAAa,KAAb;AAAA,MAAoB,QAApB,GAAqF,KAArF,CAAoB,QAApB;AAAA,MAA8B,SAA9B,GAAqF,KAArF,CAA8B,SAA9B;AAAA,MAAyC,eAAzC,GAAqF,KAArF,CAAyC,eAAzC;AAAA,0BAAqF,KAArF,CAA0D,UAA1D;AAAA,MAA0D,UAA1D,kCAAqE,YAArE;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,MAApB;AACA,MAAM,OAAO,GAAG,kBAAkB,EAAlC;AACA,MAAM,WAAW,gBACb,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACK,UADL,EACiB,GADjB,eACqB,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,EAAU;AAAE,IAAA,MAAM,EAAE;AAAV,GAAV,CAAR,CADrB,CADJ;AAMA,MAAM,WAAW,GAAG,CAAC,CAAC,QAAQ,CAAC,MAAX,IAAqB,CAAC,IAAI,CAAC,IAAL,CAAW,UAAA,IAAI;AAAA,WAAI,CAAC,QAAQ,CAAC,QAAT,CAAkB,IAAI,CAAC,SAAD,CAAtB,CAAL;AAAA,GAAf,CAA1C;AAEA,sBACI,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;AAAC,IAAA,GAAG,EAAA,IAAJ;AAAK,IAAA,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAT;AAApB,GAAV,eACI,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB;AACb,IAAA,OAAO,eAAE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAC,MAAA,KAAK,EAAC,SAAP;AAAiB,MAAA,aAAa,EAAE,CAAC,WAAD,IAAgB,CAAC,CAAC,QAAQ,CAAC,MAA3D;AAAoE,MAAA,OAAO,EAAE,WAA7E;AAA0F,MAAA,OAAO,EAAE;AAAnG,KAAT,CADI;AAEb,IAAA,KAAK,EAAG;AAFK,GAAjB,CADJ,CADJ;AAQH,CApBM;AAsBP,OAAO,IAAM,OAAO,GAAG,SAAV,OAAU,CAAA,KAAK,EAAG;AAC3B,MAAO,MAAP,GAAkC,KAAlC,CAAO,MAAP;AAAA,MAAe,QAAf,GAAkC,KAAlC,CAAe,QAAf;AAAA,MAAyB,KAAzB,GAAkC,KAAlC,CAAyB,KAAzB;AACA,MAAM,gBAAgB,GAAG,QAAQ,GAAG,QAAH,GAAc;AAAA,QAAE,MAAF,QAAE,MAAF;AAAA,QAAU,KAAV,QAAU,KAAV;AAAA,uBAA0B,MAA1B,cAAoC,KAAK,GAAG,QAAQ,KAAX,GAAoB,EAA7D;AAAA,GAA/C;AACA,sBACI,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AAAC,IAAA,SAAS,EAAC;AAAX,GAAX,EACK,gBAAgB,CAAC;AAAC,IAAA,MAAM,EAAN,MAAD;AAAS,IAAA,KAAK,EAAL;AAAT,GAAD,CADrB,CADJ;AAKH,CARM;AAUP,OAAO,IAAM,aAAa,GAAG,SAAhB,aAAgB,CAAA,KAAK,EAAG;AACjC,wBAA+I,KAA/I,CAAO,QAAP;AAAA,MAAO,QAAP,gCAAgB,EAAhB;AAAA,4BAA+I,KAA/I,CAAoB,YAApB;AAAA,MAAoB,YAApB,oCAAiC,EAAjC;AAAA,MAAqC,SAArC,GAA+I,KAA/I,CAAqC,SAArC;AAAA,MAAgD,iBAAhD,GAA+I,KAA/I,CAAgD,iBAAhD;AAAA,MAAmE,cAAnE,GAA+I,KAA/I,CAAmE,cAAnE;AAAA,MAAmF,YAAnF,GAA+I,KAA/I,CAAmF,YAAnF;AAAA,4BAA+I,KAA/I,CAAiG,YAAjG;AAAA,MAAiG,YAAjG,oCAA8G,UAA9G;AAAA,yBAA+I,KAA/I,CAA0H,SAA1H;AAAA,MAA0H,SAA1H,iCAAoI,OAApI;AACA,MAAM,OAAO,GAAG,kBAAkB,EAAlC;AACA,MAAM,yBAAyB,GAAG,iBAAiB,GAAG,iBAAH,GAAuB,CAAC,CAAC,SAAF,GAAc;AAAA,QAAE,IAAF,SAAE,IAAF;AAAA,QAAQ,SAAR,SAAQ,SAAR;AAAA,wBAAuB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAAO,IAAI,CAAC,SAAD,CAAX,CAAvB;AAAA,GAAd,GAAsE,EAAhJ;AACA,sBACI,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AAAC,IAAA,SAAS,EAAC,MAAX;AAAkB,IAAA,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAT;AAAjC,GAAX,EACK,yBAAyB,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAxC,gBACG,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AAAC,IAAA,OAAO,EAAC,SAAT;AAAmB,IAAA,OAAO,EAAC;AAA3B,GAAX,EACK,UAAC,UAAD;AAAA,wBACG,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,eACI,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI,MAAA,CAAA,MAAA,CAAA;AAAC,MAAA,SAAS,EAAC,MAAX;AAAkB,MAAA,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,MAAT,CAAjC;AAAmD,MAAA,QAAQ,EAAC,MAA5D;AAAmE,MAAA,UAAU,EAAC,gBAA9E;AAA+F,MAAA,CAAC,EAAE;AAAlG,KAAA,EAAyG,WAAW,CAAC,UAAD,CAApH,CAAJ,YACQ,QAAQ,CAAC,MADjB,cAC2B,YAD3B,EADJ,eAII,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,MAAA,CAAA,MAAA,CAAA,EAAA,EACA,WAAW,CAAC,UAAD,CADX,EACuB;AAC3B,MAAA,YAAY,EAAE;AACV,QAAA,QAAQ,EAAE,QADA;AAEV,QAAA,UAAU,EAAE;AAFF,OADa;AAK3B,MAAA,eAAe,EAAE;AACb,QAAA,QAAQ,EAAE,KADG;AAEb,QAAA,UAAU,EAAE;AAFC;AALU,KADvB,CAAR,eAWI,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AAAC,MAAA,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,YAAT;AAAhB,KAAL,EACK,QAAQ,CAAC,GAAT,CAAa,UAAA,GAAG;AAAA,0BACb,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AACL,QAAA,GAAG,EAAE,GADA;AAEL,QAAA,MAAM,EAAA,IAFD;AAGL,QAAA,OAAO,EAAE,iBAAA,CAAC;AAAA,iBAAI,YAAY,CAAC;AAAC,YAAA,KAAK,EAAC,CAAP;AAAU,YAAA,KAAK,EAAE,YAAY,CAAC,GAAD,CAAZ,CAAkB,SAAlB;AAAjB,WAAD,CAAhB;AAAA;AAHL,OAAT,eAKI,KAAA,CAAA,aAAA,CAAC,yBAAD,EAA0B;AAAC,QAAA,IAAI,EAAE,YAAY,CAAC,GAAD,CAAnB;AAA0B,QAAA,SAAS,EAAE;AAArC,OAA1B,CALJ,CADa;AAAA,KAAhB,CADL,CAXJ,CAJJ,CADH;AAAA,GADL,CADH,gBAkCG,KAAA,CAAA,aAAA,CAAC,GAAD,EAAI;AAAC,IAAA,SAAS,EAAC,MAAX;AAAkB,IAAA,QAAQ,EAAC,MAA3B;AAAkC,IAAA,UAAU,EAAC,gBAA7C;AAA8D,IAAA,CAAC,EAAE;AAAjE,GAAJ,YACQ,QAAQ,CAAC,MADjB,cAC2B,YAD3B,EAnCR,EAwCK,CAAC,CAAC,QAAQ,CAAC,MAAX,iBACG,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AAAC,IAAA,IAAI,EAAC,GAAN;AAAU,IAAA,OAAO,EAAE;AAAnB,GAAL,EAAyC,SAAzC,CAzCR,CADJ;AA8CH,CAlDM","sourceRoot":"","sourcesContent":["import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { FormControlLabel, FormGroup, Typography, Link, Box, Popover, List, ListItem } from \"@material-ui/core\";\nimport { Checkbox } from \"../Checkbox\";\nimport PopupState, { bindTrigger, bindPopover } from 'material-ui-popup-state';\nconst selectToolsClasses = makeStyles(theme => ({\n    container: {\n        paddingRight: theme.spacing(1.25),\n        paddingLeft: theme.spacing(1.25)\n    },\n    selectedList: {\n        maxHeight: 400\n    },\n    action: {\n        cursor: \"pointer\"\n    }\n}));\nexport const SelectAllToggler = props => {\n    const { list, total, selected, selectKey, toggleSelectAll, selectText = \"Select All\" } = props;\n    const loaded = list.length;\n    const classes = selectToolsClasses();\n    const togglerText = (React.createElement(React.Fragment, null,\n        selectText,\n        \" \",\n        React.createElement(Counter, Object.assign({}, props, { loaded: loaded }))));\n    const allSelected = !!selected.length && !list.some(item => !selected.includes(item[selectKey]));\n    return (React.createElement(FormGroup, { row: true, className: clsx(classes.container) },\n        React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { color: \"primary\", indeterminate: !allSelected && !!selected.length, checked: allSelected, onClick: toggleSelectAll }), label: togglerText })));\n};\nexport const Counter = props => {\n    const { loaded, template, total } = props;\n    const resolvedTemplate = template ? template : ({ loaded, total }) => `( ${loaded} ${total ? 'of ' + total : ''} objects )`;\n    return (React.createElement(Typography, { component: \"span\" }, resolvedTemplate({ loaded, total })));\n};\nexport const SelectCounter = props => {\n    const { selected = [], selectedData = {}, selectKey, selectedComponent, handleClearAll, handleSelect, selectedText = \"Selected\", clearText = \"Clear\" } = props;\n    const classes = selectToolsClasses();\n    const ResolvedSelectedComponent = selectedComponent ? selectedComponent : !!selectKey ? ({ data, selectKey }) => React.createElement(\"span\", null, data[selectKey]) : \"\";\n    return (React.createElement(Typography, { component: \"span\", className: clsx(classes.container) },\n        ResolvedSelectedComponent && !!selected.length ?\n            React.createElement(PopupState, { variant: \"popover\", popupId: \"show-selected\" }, (popupState) => (React.createElement(React.Fragment, null,\n                React.createElement(Box, Object.assign({ component: \"span\", className: clsx(classes.action), fontSize: \"1rem\", fontWeight: \"fontWeightBold\", m: 1 }, bindTrigger(popupState)), `${selected.length} ${selectedText}`),\n                React.createElement(Popover, Object.assign({}, bindPopover(popupState), { anchorOrigin: {\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }, transformOrigin: {\n                        vertical: 'top',\n                        horizontal: 'center',\n                    } }),\n                    React.createElement(List, { className: clsx(classes.selectedList) }, selected.map(val => (React.createElement(ListItem, { key: val, button: true, onClick: e => handleSelect({ event: e, value: selectedData[val][selectKey] }) },\n                        React.createElement(ResolvedSelectedComponent, { data: selectedData[val], selectKey: selectKey })))))))))\n            :\n                React.createElement(Box, { component: \"span\", fontSize: \"1rem\", fontWeight: \"fontWeightBold\", m: 1 }, `${selected.length} ${selectedText}`),\n        !!selected.length &&\n            React.createElement(Link, { href: \"#\", onClick: handleClearAll }, clearText)));\n};\n//# sourceMappingURL=selectTools.js.map"]},"metadata":{},"sourceType":"module"}